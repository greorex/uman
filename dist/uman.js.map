{"version":3,"file":"uman.js","sources":["../src/index.js"],"sourcesContent":["/**\n * uman\n * Units Manager javascript library to orchestrate web workers\n *\n * Copyright (c) 2019 Grigory Schurovski (https://github.com/greorex)\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO - add easy method call (80%, direct calls?)\n// TODO - add lazy loading (100%)\n// TODO - add timeout for request (80%, long calls failed?)\n// TODO - add transferable objects (80%, through proxies?)\n// TODO - add Unit auto class trigger (100%)\n// TODO - add units dependency (0%)\n// TODO - split by files (0%)\n// TODO - add args and return proxies (0%)\n// TODO - add service worker support (0%)\n// TODO - add node.js support (0%)\n// TODO - add communication with server units (0%)\n\n// @ts-check\n\n/**\n * message types enum\n */\nexport const MessageType = {\n  EVENT: \"event\",\n  REQUEST: \"request\",\n  RESPONSE: \"response\",\n  RECEIPT: \"receipt\"\n};\n\n/**\n * target types enum\n */\nexport const TargetType = {\n  ALL: \"all\",\n  THIS: 0\n};\n\n/**\n * unit base call engine\n */\nexport class UnitBase {\n  constructor() {\n    this.options = {};\n    // manager engine\n    this.name = \"\";\n    // to set 'on...' in constructor\n    this.units = this._proxyUnits();\n    this._unitsProxy = {};\n\n    return this._proxyThis();\n  }\n\n  terminate() {}\n\n  _proxyThis() {\n    // proxy this\n    const base = {\n      emit: this._emitFunction(TargetType.THIS)\n    };\n    return new Proxy(this, {\n      get: (t, prop) => {\n        // own asked\n        if (prop in t) return t[prop];\n        // base asked\n        if (prop in base) return base[prop];\n        // method asked\n        return this._requestFunction(TargetType.THIS, prop);\n      }\n    });\n  }\n\n  _proxyTarget(target) {\n    // cache\n    const proxy = this._unitsProxy[target];\n    if (proxy) return proxy;\n\n    // method asked\n    const base = {\n      emit: this._emitFunction(target)\n    };\n    return (this._unitsProxy[target] = new Proxy(base, {\n      get: (t, prop) => {\n        // if own asked, 'onmethod'\n        if (prop in t) return t[prop];\n        // request method\n        return this._requestFunction(target, prop);\n      }\n    }));\n  }\n\n  _proxyUnits() {\n    // unit's fast access to other units\n    // 1. unit.units.emit(method, payload) -> to all units\n    // const other = unit.units.other;\n    // 2. other.emit(method, payload) -> to other\n    // 3. async other.method(...args) -> call other's method\n    // 4. set other.onevent(payload)\n    const base = {\n      emit: this._emitFunction(TargetType.ALL)\n    };\n    return new Proxy(base, {\n      get: (t, prop) => {\n        // if own asked\n        if (prop in t) return t[prop];\n        // if unitsProxy asked\n        return this._proxyTarget(prop);\n      }\n    });\n  }\n\n  _emitFunction(target) {\n    // to call emit(\"method\", paylod)\n    return (method, payload) =>\n      this._redispatch({\n        type: MessageType.EVENT,\n        target,\n        method,\n        payload\n      });\n  }\n\n  _requestFunction(target, method) {\n    // any number of argiments\n    // will be called as method(...args);\n    return (...args) =>\n      this._redispatch({\n        type: MessageType.REQUEST,\n        target,\n        method,\n        payload: args\n      });\n  }\n\n  _onevent(data) {\n    const { method, payload, sender } = data;\n    // do if exists\n    // trick to have short 'on...'\n    if (sender) {\n      // unit.units.sender.onmethod(payload)\n      // priority #1\n      const p = this._unitsProxy[sender];\n      if (p) {\n        const m = `on${method}`;\n        if (m in p && p[m](payload)) return;\n      }\n\n      // onsendermethod(payload)\n      // priority #2\n      const m = `on${sender}${method}`;\n      if (m in this && this[m](payload)) return;\n    }\n\n    // raw call 'onmethod(eventobject)'\n    // priority #3\n    const m = `on${method}`;\n    if (m in this && this[m](data)) return;\n  }\n\n  _oncall(data) {\n    const { method, payload } = data;\n    // method has to be declared\n    // may be async as well\n    return this[method](...payload);\n  }\n\n  _dispatch(data) {\n    switch (data.type) {\n      case MessageType.EVENT:\n        return this._onevent(data);\n      case MessageType.REQUEST:\n        return this._oncall(data);\n    }\n  }\n\n  _redispatch(data) {\n    return this._dispatch(data);\n  }\n}\n\n/**\n * unit worker communication engine\n */\nclass UnitWorkerEngine extends UnitBase {\n  constructor(engine) {\n    super();\n\n    this._c = new Map(); // calls\n    this._n = 0; // next call index\n\n    this.options.timeout = 5000;\n\n    // attach engine (worker or worker self instance)\n    // ...args to support transferable objects\n    this.postMessage = (...args) => {\n      engine.postMessage(...args);\n    };\n    engine.onmessage = event => {\n      this._onmessage(event);\n    };\n  }\n\n  onmessage(_) {}\n\n  _onmessage(event) {\n    const { data } = event;\n    // is this our message?\n    if (data instanceof Object) {\n      switch (data.type) {\n        case MessageType.EVENT:\n          return this._onevent(data);\n        case MessageType.REQUEST:\n          return this._onrequest(data);\n        case MessageType.RESPONSE:\n          return this._onresponse(data);\n        case MessageType.RECEIPT:\n          return this._onreceipt(data);\n      }\n    }\n    // call standard listener\n    this.onmessage(event);\n  }\n\n  _dispatch(data) {\n    switch (data.type) {\n      case MessageType.EVENT:\n        // just post\n        return this.postMessage(data);\n      case MessageType.REQUEST:\n        // post and wait\n        return new Promise((resolve, reject) => {\n          const c = {\n            resolve,\n            reject\n          };\n          // next call id\n          data.cid = ++this._n;\n          // just in case no receiver\n          if (this.options.timeout)\n            c.timeout = setTimeout(() => {\n              this._onresponse({\n                cid: data.cid,\n                error: \"Timeout on request \" + data.method\n              });\n            }, this.options.timeout);\n          // store call\n          this._c.set(data.cid, c);\n          // and post\n          this.postMessage(data);\n        });\n    }\n  }\n\n  async _onrequest(data) {\n    const response = {\n      cid: data.cid\n    };\n\n    // receipt\n    response.type = MessageType.RECEIPT;\n    this.postMessage(response);\n\n    // call\n    try {\n      response.result = await this._oncall(data);\n    } catch (error) {\n      response.error = error;\n    }\n\n    // response\n    response.type = MessageType.RESPONSE;\n    this.postMessage(response);\n  }\n\n  _onresponse(data) {\n    const { cid, result, error } = data;\n    // restore call\n    const c = this._c.get(cid);\n    if (!c) return;\n    // remove call\n    c.timeout && clearTimeout(c.timeout);\n    this._c.delete(cid);\n    // promise's time\n    !error ? c.resolve(result) : c.reject(new Error(error));\n  }\n\n  _onreceipt(data) {\n    // drop timeout\n    const c = this._c.get(data.cid);\n    c && c.timeout && clearTimeout(c.timeout);\n  }\n}\n\n/**\n * unit base for worker adapter\n */\nexport class UnitWorker extends UnitWorkerEngine {\n  constructor(worker) {\n    super(worker);\n\n    this.terminate = () => worker.terminate();\n  }\n\n  _onevent(data) {\n    if (data.target) return this._redispatch(data);\n    return super._onevent(data);\n  }\n\n  _oncall(data) {\n    if (data.target) return this._redispatch(data);\n    return super._oncall(data);\n  }\n}\n\n/**\n * unit base for worker script file\n */\nexport class UnitWorkerSelf extends UnitWorkerEngine {\n  constructor(engine = self) {\n    super(engine);\n  }\n}\n\n/**\n * determines unit base class by globalThis\n */\nconst _unitAutoClass = () => {\n  if (\n    self &&\n    !self.window &&\n    self.postMessage instanceof Function &&\n    self.importScripts instanceof Function\n  )\n    return UnitWorkerSelf;\n  return UnitBase;\n};\n\n/**\n * unit with autoselected base class\n */\nexport class Unit extends _unitAutoClass() {\n  static instance(unitClass) {\n    if (_unitAutoClass() === UnitWorkerSelf) return new unitClass();\n    return unitClass;\n  }\n}\n\n/**\n * units orchestration engine\n */\nexport class UnitsManager {\n  constructor(units = {}) {\n    this._units = {};\n    // copy entries\n    this._copyUnitsEntry(units);\n    // lazy loading engine\n    this.units = this._proxyUnits();\n  }\n\n  _proxyUnits() {\n    return new Proxy(this._units, {\n      get: (t, prop) => {\n        const value = t[prop];\n        // unit asked?\n        if (value instanceof UnitBase) return value;\n        // isn't loaded? call loader\n        if (value instanceof Function) return this._attachUnit(prop, value);\n        // as is\n        return value;\n      }\n    });\n  }\n\n  _attachUnit(name, value) {\n    let unit;\n    // case function\n    if (value instanceof Function) value = value();\n    // case worker\n    if (value instanceof Worker) unit = new UnitWorker(value);\n    // case promise\n    if (value instanceof Promise) {\n      unit = new UnitBase();\n      // resolve it later\n      unit._dispatch = async data => {\n        let u = await value.then();\n        // may be as 'export default class'\n        if (u.default instanceof Function) u = new u.default();\n        // reatach\n        u = this._attachUnit(unit.name, u);\n        // call proper method\n        return u._dispatch(data);\n      };\n    }\n    // default\n    if (!unit) unit = value;\n    // finaly unit has to be as\n    if (!(unit instanceof UnitBase))\n      throw new Error(\"Wrong class of unit: \" + name);\n    // attach\n    unit.name = name;\n    // override to redispatch\n    unit._redispatch = data => {\n      if (!data.target) return unit._dispatch(data);\n      // redispatch\n      data.sender = unit.name;\n      return this._redispatch(data);\n    };\n\n    return (this._units[name] = unit);\n  }\n\n  _copyUnitsEntry(units) {\n    for (let e of Object.entries(units)) {\n      const [name, unit] = e;\n      // check duplication\n      if (this._units[name])\n        throw new Error(\"Unit \" + unit + \" already exists\");\n      // check name (simple)\n      if (typeof name != \"string\" || name === \"emit\")\n        throw new Error(\"Wrong unit name: \" + name);\n      // check unit\n      if (unit instanceof UnitBase) this._attachUnit(name, unit);\n      else if (unit instanceof Function) this._units[name] = unit;\n      else throw new Error(\"Wrong unit value: \" + unit);\n    }\n  }\n\n  _redispatch(data) {\n    const { target, sender } = data;\n\n    switch (target) {\n      case TargetType.ALL:\n        // to all except sender\n        for (let k of Object.keys(this._units)) {\n          if (k !== sender) {\n            // only to loaded units\n            const u = this._units[k];\n            if (u instanceof UnitBase) u._dispatch(data);\n          }\n        }\n        return;\n\n      default:\n        // load if doesn't\n        const u = this.units[target];\n        if (u instanceof UnitBase) return u._dispatch(data);\n    }\n\n    // not a unit or wrong target\n    throw new Error(\"Wrong target unit: \" + target);\n  }\n\n  addUnits(units) {\n    this._copyUnitsEntry(units);\n    return this;\n  }\n\n  deleteUnit(name) {\n    const unit = this._units[name];\n    // stop it if loaded\n    if (unit instanceof UnitBase) unit.terminate();\n    // drop it\n    if (unit) delete this._units[name];\n  }\n\n  deleteAll() {\n    for (let name of Object.keys(this._units)) this.deleteUnit(name);\n  }\n}\n"],"names":["MessageType","EVENT","REQUEST","RESPONSE","RECEIPT","TargetType","ALL","THIS","UnitBase","[object Object]","this","options","name","units","_proxyUnits","_unitsProxy","_proxyThis","base","emit","_emitFunction","Proxy","get","t","prop","_requestFunction","target","proxy","_proxyTarget","method","payload","_redispatch","type","args","data","sender","p","m","_onevent","_oncall","_dispatch","UnitWorkerEngine","engine","super","_c","Map","_n","timeout","postMessage","onmessage","event","_onmessage","_","Object","_onrequest","_onresponse","_onreceipt","Promise","resolve","reject","c","cid","setTimeout","error","set","response","result","clearTimeout","delete","Error","UnitWorker","worker","terminate","UnitWorkerSelf","self","_unitAutoClass","window","Function","importScripts","Unit","unitClass","_units","_copyUnitsEntry","value","_attachUnit","unit","Worker","async","u","then","default","e","entries","k","keys","deleteUnit"],"mappings":";;;;;;wMA2BaA,EAAc,CACzBC,MAAO,QACPC,QAAS,UACTC,SAAU,WACVC,QAAS,WAMEC,EAAa,CACxBC,IAAK,MACLC,KAAM,GAMD,MAAMC,EACXC,cAQE,OAPAC,KAAKC,QAAU,GAEfD,KAAKE,KAAO,GAEZF,KAAKG,MAAQH,KAAKI,cAClBJ,KAAKK,YAAc,GAEZL,KAAKM,aAGdP,aAEAA,aAEE,MAAMQ,EAAO,CACXC,KAAMR,KAAKS,cAAcd,EAAWE,OAEtC,OAAO,IAAIa,MAAMV,KAAM,CACrBW,IAAK,CAACC,EAAGC,IAEHA,KAAQD,EAAUA,EAAEC,GAEpBA,KAAQN,EAAaA,EAAKM,GAEvBb,KAAKc,iBAAiBnB,EAAWE,KAAMgB,KAKpDd,aAAagB,GAEX,MAAMC,EAAQhB,KAAKK,YAAYU,GAC/B,GAAIC,EAAO,OAAOA,EAGlB,MAAMT,EAAO,CACXC,KAAMR,KAAKS,cAAcM,IAE3B,OAAQf,KAAKK,YAAYU,GAAU,IAAIL,MAAMH,EAAM,CACjDI,IAAK,CAACC,EAAGC,IAEHA,KAAQD,EAAUA,EAAEC,GAEjBb,KAAKc,iBAAiBC,EAAQF,KAK3Cd,cAOE,MAAMQ,EAAO,CACXC,KAAMR,KAAKS,cAAcd,EAAWC,MAEtC,OAAO,IAAIc,MAAMH,EAAM,CACrBI,IAAK,CAACC,EAAGC,IAEHA,KAAQD,EAAUA,EAAEC,GAEjBb,KAAKiB,aAAaJ,KAK/Bd,cAAcgB,GAEZ,MAAO,CAACG,EAAQC,IACdnB,KAAKoB,YAAY,CACfC,KAAM/B,EAAYC,MAClBwB,OAAAA,EACAG,OAAAA,EACAC,QAAAA,IAINpB,iBAAiBgB,EAAQG,GAGvB,MAAO,IAAII,IACTtB,KAAKoB,YAAY,CACfC,KAAM/B,EAAYE,QAClBuB,OAAAA,EACAG,OAAAA,EACAC,QAASG,IAIfvB,SAASwB,GACP,MAAML,OAAEA,EAAMC,QAAEA,EAAOK,OAAEA,GAAWD,EAGpC,GAAIC,EAAQ,CAGV,MAAMC,EAAIzB,KAAKK,YAAYmB,GAC3B,GAAIC,EAAG,CACL,MAAMC,EAAI,KAAKR,IACf,GAAIQ,KAAKD,GAAKA,EAAEC,GAAGP,GAAU,OAK/B,MAAMO,EAAI,KAAKF,IAASN,IACxB,GAAIQ,KAAK1B,MAAQA,KAAK0B,GAAGP,GAAU,OAKrC,MAAMO,EAAI,KAAKR,IACXQ,KAAK1B,MAAQA,KAAK0B,GAAGH,GAG3BxB,QAAQwB,GACN,MAAML,OAAEA,EAAMC,QAAEA,GAAYI,EAG5B,OAAOvB,KAAKkB,MAAWC,GAGzBpB,UAAUwB,GACR,OAAQA,EAAKF,MACX,KAAK/B,EAAYC,MACf,OAAOS,KAAK2B,SAASJ,GACvB,KAAKjC,EAAYE,QACf,OAAOQ,KAAK4B,QAAQL,IAI1BxB,YAAYwB,GACV,OAAOvB,KAAK6B,UAAUN,IAO1B,MAAMO,UAAyBhC,EAC7BC,YAAYgC,GACVC,QAEAhC,KAAKiC,GAAK,IAAIC,IACdlC,KAAKmC,GAAK,EAEVnC,KAAKC,QAAQmC,QAAU,IAIvBpC,KAAKqC,YAAc,IAAIf,KACrBS,EAAOM,eAAef,IAExBS,EAAOO,UAAYC,IACjBvC,KAAKwC,WAAWD,IAIpBxC,UAAU0C,IAEV1C,WAAWwC,GACT,MAAMhB,KAAEA,GAASgB,EAEjB,GAAIhB,aAAgBmB,OAClB,OAAQnB,EAAKF,MACX,KAAK/B,EAAYC,MACf,OAAOS,KAAK2B,SAASJ,GACvB,KAAKjC,EAAYE,QACf,OAAOQ,KAAK2C,WAAWpB,GACzB,KAAKjC,EAAYG,SACf,OAAOO,KAAK4C,YAAYrB,GAC1B,KAAKjC,EAAYI,QACf,OAAOM,KAAK6C,WAAWtB,GAI7BvB,KAAKsC,UAAUC,GAGjBxC,UAAUwB,GACR,OAAQA,EAAKF,MACX,KAAK/B,EAAYC,MAEf,OAAOS,KAAKqC,YAAYd,GAC1B,KAAKjC,EAAYE,QAEf,OAAO,IAAIsD,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAI,CACRF,QAAAA,EACAC,OAAAA,GAGFzB,EAAK2B,MAAQlD,KAAKmC,GAEdnC,KAAKC,QAAQmC,UACfa,EAAEb,QAAUe,WAAW,KACrBnD,KAAK4C,YAAY,CACfM,IAAK3B,EAAK2B,IACVE,MAAO,sBAAwB7B,EAAKL,UAErClB,KAAKC,QAAQmC,UAElBpC,KAAKiC,GAAGoB,IAAI9B,EAAK2B,IAAKD,GAEtBjD,KAAKqC,YAAYd,MAKzBxB,iBAAiBwB,GACf,MAAM+B,EAAW,CACfJ,IAAK3B,EAAK2B,KAIZI,EAASjC,KAAO/B,EAAYI,QAC5BM,KAAKqC,YAAYiB,GAGjB,IACEA,EAASC,aAAevD,KAAK4B,QAAQL,GACrC,MAAO6B,GACPE,EAASF,MAAQA,EAInBE,EAASjC,KAAO/B,EAAYG,SAC5BO,KAAKqC,YAAYiB,GAGnBvD,YAAYwB,GACV,MAAM2B,IAAEA,EAAGK,OAAEA,EAAMH,MAAEA,GAAU7B,EAEzB0B,EAAIjD,KAAKiC,GAAGtB,IAAIuC,GACjBD,IAELA,EAAEb,SAAWoB,aAAaP,EAAEb,SAC5BpC,KAAKiC,GAAGwB,OAAOP,GAEdE,EAA4BH,EAAED,OAAO,IAAIU,MAAMN,IAAvCH,EAAEF,QAAQQ,IAGrBxD,WAAWwB,GAET,MAAM0B,EAAIjD,KAAKiC,GAAGtB,IAAIY,EAAK2B,KAC3BD,GAAKA,EAAEb,SAAWoB,aAAaP,EAAEb,UAO9B,MAAMuB,UAAmB7B,EAC9B/B,YAAY6D,GACV5B,MAAM4B,GAEN5D,KAAK6D,UAAY,IAAMD,EAAOC,YAGhC9D,SAASwB,GACP,OAAIA,EAAKR,OAAef,KAAKoB,YAAYG,GAClCS,MAAML,SAASJ,GAGxBxB,QAAQwB,GACN,OAAIA,EAAKR,OAAef,KAAKoB,YAAYG,GAClCS,MAAMJ,QAAQL,IAOlB,MAAMuC,UAAuBhC,EAClC/B,YAAYgC,EAASgC,MACnB/B,MAAMD,IAOV,MAAMiC,EAAiB,IAEnBD,OACCA,KAAKE,QACNF,KAAK1B,uBAAuB6B,UAC5BH,KAAKI,yBAAyBD,SAEvBJ,EACFhE,EAMF,MAAMsE,UAAaJ,KACxBjE,gBAAgBsE,GACd,OAAIL,MAAqBF,EAAuB,IAAIO,EAC7CA,yGAOJ,MACLtE,YAAYI,EAAQ,IAClBH,KAAKsE,OAAS,GAEdtE,KAAKuE,gBAAgBpE,GAErBH,KAAKG,MAAQH,KAAKI,cAGpBL,cACE,OAAO,IAAIW,MAAMV,KAAKsE,OAAQ,CAC5B3D,IAAK,CAACC,EAAGC,KACP,MAAM2D,EAAQ5D,EAAEC,GAEhB,OAAI2D,aAAiB1E,EAAiB0E,EAElCA,aAAiBN,SAAiBlE,KAAKyE,YAAY5D,EAAM2D,GAEtDA,KAKbzE,YAAYG,EAAMsE,GAChB,IAAIE,EAsBJ,GApBIF,aAAiBN,WAAUM,EAAQA,KAEnCA,aAAiBG,SAAQD,EAAO,IAAIf,EAAWa,IAE/CA,aAAiB1B,UACnB4B,EAAO,IAAI5E,EAEX4E,EAAK7C,UAAY+C,MAAAA,IACf,IAAIC,QAAUL,EAAMM,OAMpB,OAJID,EAAEE,mBAAmBb,WAAUW,EAAI,IAAIA,EAAEE,SAE7CF,EAAI7E,KAAKyE,YAAYC,EAAKxE,KAAM2E,GAEzBA,EAAEhD,UAAUN,KAIlBmD,IAAMA,EAAOF,KAEZE,aAAgB5E,GACpB,MAAM,IAAI4D,MAAM,wBAA0BxD,GAW5C,OATAwE,EAAKxE,KAAOA,EAEZwE,EAAKtD,YAAcG,GACZA,EAAKR,QAEVQ,EAAKC,OAASkD,EAAKxE,KACZF,KAAKoB,YAAYG,IAHCmD,EAAK7C,UAAUN,GAMlCvB,KAAKsE,OAAOpE,GAAQwE,EAG9B3E,gBAAgBI,GACd,IAAK,IAAI6E,KAAKtC,OAAOuC,QAAQ9E,GAAQ,CACnC,MAAOD,EAAMwE,GAAQM,EAErB,GAAIhF,KAAKsE,OAAOpE,GACd,MAAM,IAAIwD,MAAM,QAAUgB,EAAO,mBAEnC,GAAmB,iBAARxE,GAA6B,SAATA,EAC7B,MAAM,IAAIwD,MAAM,oBAAsBxD,GAExC,GAAIwE,aAAgB5E,EAAUE,KAAKyE,YAAYvE,EAAMwE,OAChD,CAAA,KAAIA,aAAgBR,UACpB,MAAM,IAAIR,MAAM,qBAAuBgB,GADT1E,KAAKsE,OAAOpE,GAAQwE,IAK3D3E,YAAYwB,GACV,MAAMR,OAAEA,EAAMS,OAAEA,GAAWD,EAE3B,OAAQR,GACN,KAAKpB,EAAWC,IAEd,IAAK,IAAIsF,KAAKxC,OAAOyC,KAAKnF,KAAKsE,QAC7B,GAAIY,IAAM1D,EAAQ,CAEhB,MAAMqD,EAAI7E,KAAKsE,OAAOY,GAClBL,aAAa/E,GAAU+E,EAAEhD,UAAUN,GAG3C,OAEF,QAEE,MAAMsD,EAAI7E,KAAKG,MAAMY,GACrB,GAAI8D,aAAa/E,EAAU,OAAO+E,EAAEhD,UAAUN,GAIlD,MAAM,IAAImC,MAAM,sBAAwB3C,GAG1ChB,SAASI,GAEP,OADAH,KAAKuE,gBAAgBpE,GACdH,KAGTD,WAAWG,GACT,MAAMwE,EAAO1E,KAAKsE,OAAOpE,GAErBwE,aAAgB5E,GAAU4E,EAAKb,YAE/Ba,UAAa1E,KAAKsE,OAAOpE,GAG/BH,YACE,IAAK,IAAIG,KAAQwC,OAAOyC,KAAKnF,KAAKsE,QAAStE,KAAKoF,WAAWlF"}